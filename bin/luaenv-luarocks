#!/usr/bin/env lua
-- Install luarocks for luaenv.

local function p(s, ...)
  print(s:format(...))
end

local vars = {}
local sh = {}

function sh.execf(cmd, ...)
  cmd = cmd:format(...)
  local rc = os.execute(cmd)
  return rc == true or rc == 0
end

function sh.capturef(cmd, ...)
  cmd = cmd:format(...)
  local h = io.popen(cmd)
  local stdout = h:read('*a')
  h:close()
  return stdout:gsub('\n$', '')
end

function sh.mkdirp(dir)
  return sh.execf('mkdir -p "%s"', dir)
end

function sh.exists(path)
  return sh.execf('test -e "%s"', path)
end

function sh.rmrf(path)
  return sh.execf('rm -rf "%s"', path)
end

function sh.unpack_tarball(tar_gz, intodir)
  if intodir then
    return sh.execf('tar xzpf "%s" -C "%s"', tar_gz, intodir)
  else
    return sh.execf('tar zxpf "%s"', tar_gz)
  end
end

function sh.has_command(cmd)
  return sh.execf('type %s >/dev/null 2>&1', cmd)
end

function sh.required_one_of(cmd,...)
  local cmds = {cmd, ...}
  for _, v in ipairs(cmds) do
    if sh.has_command(v) then
      return true
    end
  end
  p("Required at least one of follow commands installed: %s.", table.concat(cmds, ', '))
  os.exit(1)
end

function sh.ensure(dir)
  if not sh.exists(dir) then
    sh.mkdirp(dir)
  end
end

function sh.basename(path)
  return (path:match('([^/]+)$'))
end


function sh.download(url, path)
  local ok, starts
  if vars.VERBOSE then
    starts = os.time()
    p('downloading %s...', url)
  end
  if sh.has_command('aria2c') then
    local d, f = path:match('^(.-)/([^/]+)$')
    local v = vars.VERBOSE and '' or '-q'
    ok = sh.execf('aria2c %s -d "%s" -o "%s" --conditional-get=true --allow-overwrite "%s"', v, d, f, url)
  elseif sh.has_command('curl') then
    local v = vars.VERBOSE and '--verbose' or '-qsS'
    ok = sh.execf('curl %s -L -z "%s" -o "%s" "%s"', v, path, path, url)
  elseif sh.has_command('wget') then
    local v = vars.VERBOSE and '' or '-nv'
    ok = sh.execf('wget %s --timestamping -O "%s" "%s"', v, path, url)
  else
    p('error: please install `aria2c` or `curl` or `wget` and try again')
    os.exit(1)
  end
  if vars.VERBOSE then
    p('result: %s, time: %d', ok, os.difftime(os.time(), starts))
  end
  return ok
end


-- return a list or known versions, the latert version in front
local function known_versions()
  local function hash(t)
    for _, v in ipairs(t) do
      t[v] = true
    end
    return t
  end

  return hash({
    '3.8.0',
    '3.7.0',
    '3.6.0',
    '3.5.0',
    '3.4.0',
    '3.3.1',
    '3.3.0',
    '3.2.1',
    '3.2.0',
    '3.1.3',
    '3.1.2',
    '3.1.1',
    '3.1.0',
    '3.0.4',
    '3.0.3',
    '3.0.2',
    '3.0.1',
    '3.0.0',
    '2.4.3',
    '2.4.3',
    '2.4.1',
    '2.4.0',
    '2.3.0',
    '2.2.2',
    '2.2.1',
    '2.2.0' })
end


local function setup_environments(opts)
  if opts.verbose then vars.VERBOSE = true end
  vars.LUAENV_ROOT = sh.capturef('luaenv root')
  vars.CACHE = vars.LUAENV_ROOT..'/plugins/luaenv-luarocks/.cache'
  sh.ensure(vars.CACHE)
  if not opts.uninstall then
    vars.VERSIONS = known_versions()
  end
end


local function usage(code)
p([[Usage: luaenv luarocks [<luarocks-version>] [--verbose]

Install specified version of LuaRocks for your Lua installtion in luaenv.

<luarocks-version>: install specified version of LuaRocks
                    (default to latest known stable version).
]])

  os.exit(code or 1)
end

local function tarball_url_for_version(version)
  return ('https://github.com/luarocks/luarocks/archive/v%s.tar.gz'):format(version)
end

local function source_dir_for_version(version)
  return ('%s/luarocks-%s'):format(vars.CACHE, version)
end

local function luaroot()
  return vars.LUAENV_ROOT..'/versions/'..sh.capturef('luaenv version-name')
end

local function fetch_release(version)
  local url = tarball_url_for_version(version)
  local filename = sh.basename(url)
  local target_path = vars.CACHE..'/'..filename


  if not sh.download(url, target_path) then
    p('Error while downloading %s', url)
    os.exit(1)
  end

  --p('Extracting %s...', filename)
  local srcdir = source_dir_for_version(version)
  sh.rmrf(srcdir)
  sh.unpack_tarball(target_path, vars.CACHE)
  return srcdir
end

local function install(version)
  sh.required_one_of('unzip')
  sh.required_one_of('aria2c', 'curl', 'wget')

  version = version or vars.VERSIONS[1]
  if not vars.VERSIONS[version] then
    p('Unknown version: %s', version)
    p('Known versions are: ')
    p(table.concat(vars.VERSIONS, '\n'))
    os.exit(1)
  end

  local PREFIX = luaroot()
  local INC = sh.capturef('find %s/include -name lua.h', PREFIX):gsub('/lua%.h$', '')
  local BIN = PREFIX..'/bin'

  p('Install LuaRocks %s into %s...', version, PREFIX)

  local srcdir = fetch_release(version)
  if not sh.execf('cd "%s" && ./configure --prefix="%s" --with-lua-bin="%s" --with-lua-include="%s" --force-config > /dev/null', srcdir, PREFIX, BIN, INC) then
    p('Error while configure LuaRocks')
    os.exit(1)
  end

  if not sh.execf('cd "%s" && make bootstrap > /dev/null', srcdir) then
    p('Error while install LuaRocks')
    os.exit(1)
  end

  sh.execf('luaenv rehash')
  sh.rmrf(source_dir_for_version(version))
end

local function uninstall()
  local PREFIX = luaroot()
  sh.execf('luarocks remove luarocks')
  sh.rmrf(PREFIX..'/share/lua/5.1/luarocks')
  sh.rmrf(PREFIX..'/etc/luarocks')
end

local function parse_arg(arg)
  local options = {
    verbose={argc=0},
    list={argc=0},
    uninstall={argc=0}
  }

  local opts = {}
  for _, v in ipairs(arg) do
    local o = v:match('^%-%-(.+)')
    if o and options[o] then
      if options[o].argc == 0 then
        opts[o] = true
      end
    else
      opts.version = v
    end
  end
  return opts
end

local function show_versions()
  p(table.concat(vars.VERSIONS, '\n'))
end

local function main(...)
  local opts = parse_arg({...})
  if opts.version and not opts.version:match('^%d+%.%d+.*') then
    return usage()
  end

  setup_environments(opts)
  if opts.list then
    return show_versions()
  elseif opts.uninstall then
    return uninstall()
  end
  install(opts.version)
end

main(...)
